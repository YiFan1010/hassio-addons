#!/command/with-contenv bashio
# shellcheck shell=bash
# vim: ft=bash
# ==============================================================================
# Start srat service
# ==============================================================================

PRERELEASE_TAG=$(curl -s https://api.github.com/repos/dianlight/srat/releases | jq -r 'map(select(.prerelease)) | .[0].tag_name')
RELEASE_TAG=$(curl -s https://api.github.com/repos/dianlight/srat/releases | jq -r 'map(select(.release)) | .[0].tag_name')

if bashio::config.has_value 'update_srat_onstart'; then
  bashio::log.info "Update on start: $(bashio::config 'update_srat_onstart')"
  if bashio::config.equals 'update_srat_onstart' 'release'; then
    bashio::log.info "Updating to ${RELEASE_TAG}"
    bashio::log.debug "Downloading from https://github.com/dianlight/srat/releases/download/${RELEASE_TAG}/srat_$(arch)"  
    curl -L "https://github.com/dianlight/srat/releases/download/${RELEASE_TAG}/srat_$(arch)" >/usr/local/bin/srat
    #gh -R dianlight/srat release download $RELEASE_TAG -p "srat_$(arch)" -O /usr/local/bin/srat --clobber
  elif bashio::config.equals 'update_srat_onstart' 'prerelease'; then
    bashio::log.info "Updating to ${PRERELEASE_TAG}"
    bashio::log.debug "Downloading from https://github.com/dianlight/srat/releases/download/${PRERELEASE_TAG}/srat_$(arch)"  
    curl -L "https://github.com/dianlight/srat/releases/download/${PRERELEASE_TAG}/srat_$(arch)" >/usr/local/bin/srat
    #gh -R dianlight/srat release download $PRERELEASE_TAG -p "srat_$(arch)" -O /usr/local/bin/srat --clobber
  elif bashio::config.equals 'update_srat_onstart' 'localdev'; then
    bashio::log.info "Updating to from local_addon_registry.home repository"
    bashio::log.debug "Downloading from local_addon_registry.home repository"
    curl -L "http://local_addon_registry.home:8090/srat_$(arch)" >/usr/local/bin/srat
  fi
  chmod +x /usr/local/bin/srat
fi

# s6-svc -r /var/run/s6/services/<service name>
# -addon \

exec /usr/local/bin/srat \
  -port 3000 \
  -addon \
  -conf /config/bootconfig.json \
  -db /data/config.db3 \
  -out /etc/samba/smb.conf \
  -docker-interface "$(bashio::network 'network.info.docker.inerface' '.docker.interface')" \
  -docker-network "$(bashio::network 'network.info.docker.network' '.docker.address')"

